---
- name: Wait until NooBaa is ready
  kubernetes.core.k8s_info:
    api_version: noobaa.io/v1alpha1
    kind: NooBaa
    name: noobaa
    namespace: openshift-storage
  register: r_noobaa
  until: r_noobaa.resources.0.status.phase == "Ready"
  retries: 120
  delay: 10

- name: Retrieve NooBaa bucket class
  k8s_info:
    api_version: noobaa.io/v1alpha1
    kind: BucketClass
    namespace: openshift-storage
  register: r_bucket_class

- name: Assert Bucket Class is present
  assert:
    that:
      - r_bucket_class.resources | length == 1
    fail_msg: Quay must be installed on a cluster with OpenShift Container Storage configured - and a Bucket Class deployed.

- name: Install Quay operators and other resources
  k8s:
    state: present
    definition: "{{ lookup('template', item ) | from_yaml }}"
  loop:
    - openshift-quay-operator.yml.j2
    - openshift-quay-bridge-operator.yml.j2
    - openshift-quay-security-operator.yml.j2
    - openshift-quay-namespace.yml.j2

- name: Wait for Quay operator to be ready
  k8s_info:
    api_version: v1
    kind: Deployment
    namespace: openshift-operators
    name: "quay-operator.{{ quay_operator_version }}" # CHANGEME make this dynamic !
  register: r_qo_deployment
  retries: 30
  delay: 10
  until:
    - r_qo_deployment.resources | length | int > 0
    - r_qo_deployment.resources[0].status.availableReplicas is defined
    - r_qo_deployment.resources[0].status.availableReplicas | int == r_qo_deployment.resources[0].spec.replicas | int

- name: Quay Registry configuration
  shell: |
    oc create secret generic -n "{{ ocp4_workload_quay_operator_namespace }}" --from-file config.yaml=../roles/redhat_developer_hub_bootstrap/templates/quay-config.yaml quay-init-config-bundle

- name: Create Quay Registry application
  k8s:
    state: present
    definition: "{{ lookup('template', item ) | from_yaml }}"
  loop:
    - quay-registry.yml.j2

- name: Wait for Quay Registry to be available
  k8s_info:
    api_version: quay.redhat.com/v1
    kind: QuayRegistry
    name: quay-registry
    namespace: "{{ ocp4_workload_quay_operator_namespace }}"
  register: r_quay_registry
  until:
    - r_quay_registry.resources[0].status.currentVersion is defined
    - r_quay_registry.resources[0].status.currentVersion | length > 0
  retries: 30
  delay: 10

- name: Determine Cluster Base Domain for Quay Route
  k8s_info:
    api_version: config.openshift.io/v1
    kind: Ingress
    name: cluster
  register: r_ingress_config

- name: Set Quay Registry route hostname
  set_fact:
    _quay_registry_route: "{{ ocp4_workload_quay_operator_registry_name }}-quay-{{ ocp4_workload_quay_operator_namespace }}.{{ r_ingress_config.resources[0].spec.domain }}"

- name: Wait for API to be available
  uri:
    url: "https://{{ _quay_registry_route }}/api/v1/discovery"
    method: GET
    validate_certs: false
  register: r_quayapi
  until: r_quayapi.status == 200 or r_quayapi.status == 403
  retries: 120
  delay: 10

- name: Create the admin user
  uri:
    url: "https://{{ _quay_registry_route }}/api/v1/user/initialize"
    method: POST
    body:
      username: "{{ ocp4_workload_quay_operator_superuser_username }}"
      password: "{{ ocp4_workload_redhat_developer_hub_bootstrap_quay_admin_password }}"
      email: "{{ ocp4_workload_quay_operator_superuser_email }}"
      access_token: "true"
    body_format: json
    validate_certs: false
    status_code: 200
  register: r_quayadmin

- name: Save the admin access_token
  when: r_quayadmin.status == 200
  set_fact:
    _quay_registry_admin_token: "{{ r_quayadmin.json.access_token }}"

- name: Create Quay registry admin token secret
  k8s:
    state: present
    definition: "{{ lookup('template', 'quay-admin-token-secret.yml.j2' ) | from_yaml }}"

- name: Create vault secrets for Quay access
  vars:
    quay_auth: "{{ ocp4_workload_quay_operator_superuser_username }}:{{ ocp4_workload_redhat_developer_hub_bootstrap_quay_admin_password }}"
  kubernetes.core.k8s_exec:
    namespace: "{{ ocp4_workload_redhat_developer_hub_bootstrap_vault_namespace }}"
    pod: vault-0
    command: "{{ item }}"
  loop:
    - "vault kv put kv/secrets/janusidp/registry/auth value={{ quay_auth | b64encode }}"
    - "vault kv put kv/secrets/janusidp/registry/username value={{ ocp4_workload_quay_operator_superuser_username }}"
    - "vault kv put kv/secrets/janusidp/registry/password value={{
      ocp4_workload_redhat_developer_hub_bootstrap_quay_admin_password }}"
